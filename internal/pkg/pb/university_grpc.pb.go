// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: university.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// Создает новую запись
	CreateUniversity(ctx context.Context, in *CreateUniversityRequest, opts ...grpc.CallOption) (*CreateUniversityResponse, error)
	// Получение списка
	ListUniversity(ctx context.Context, in *GetUniversityRequest, opts ...grpc.CallOption) (*GetUniversityResponse, error)
	// Удаляет запись по ID
	DeleteUniversity(ctx context.Context, in *DeleteUniversityRequest, opts ...grpc.CallOption) (*DeleteUniversityResponse, error)
	// Обновляем по id
	UpdateUniversity(ctx context.Context, in *UpdateUniversityRequest, opts ...grpc.CallOption) (*UpdateUniversityResponse, error)
	// Создает новую запись
	CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*CreateStudentResponse, error)
	// Получение списка
	ListStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentResponse, error)
	// Удаляет запись по ID
	DeleteStudent(ctx context.Context, in *DeleteStudentRequest, opts ...grpc.CallOption) (*DeleteStudentResponse, error)
	// Обновляем по id
	UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*UpdateStudentResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CreateUniversity(ctx context.Context, in *CreateUniversityRequest, opts ...grpc.CallOption) (*CreateUniversityResponse, error) {
	out := new(CreateUniversityResponse)
	err := c.cc.Invoke(ctx, "/University.Service/CreateUniversity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListUniversity(ctx context.Context, in *GetUniversityRequest, opts ...grpc.CallOption) (*GetUniversityResponse, error) {
	out := new(GetUniversityResponse)
	err := c.cc.Invoke(ctx, "/University.Service/ListUniversity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteUniversity(ctx context.Context, in *DeleteUniversityRequest, opts ...grpc.CallOption) (*DeleteUniversityResponse, error) {
	out := new(DeleteUniversityResponse)
	err := c.cc.Invoke(ctx, "/University.Service/DeleteUniversity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateUniversity(ctx context.Context, in *UpdateUniversityRequest, opts ...grpc.CallOption) (*UpdateUniversityResponse, error) {
	out := new(UpdateUniversityResponse)
	err := c.cc.Invoke(ctx, "/University.Service/UpdateUniversity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*CreateStudentResponse, error) {
	out := new(CreateStudentResponse)
	err := c.cc.Invoke(ctx, "/University.Service/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentResponse, error) {
	out := new(GetStudentResponse)
	err := c.cc.Invoke(ctx, "/University.Service/ListStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteStudent(ctx context.Context, in *DeleteStudentRequest, opts ...grpc.CallOption) (*DeleteStudentResponse, error) {
	out := new(DeleteStudentResponse)
	err := c.cc.Invoke(ctx, "/University.Service/DeleteStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*UpdateStudentResponse, error) {
	out := new(UpdateStudentResponse)
	err := c.cc.Invoke(ctx, "/University.Service/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// Создает новую запись
	CreateUniversity(context.Context, *CreateUniversityRequest) (*CreateUniversityResponse, error)
	// Получение списка
	ListUniversity(context.Context, *GetUniversityRequest) (*GetUniversityResponse, error)
	// Удаляет запись по ID
	DeleteUniversity(context.Context, *DeleteUniversityRequest) (*DeleteUniversityResponse, error)
	// Обновляем по id
	UpdateUniversity(context.Context, *UpdateUniversityRequest) (*UpdateUniversityResponse, error)
	// Создает новую запись
	CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentResponse, error)
	// Получение списка
	ListStudent(context.Context, *GetStudentRequest) (*GetStudentResponse, error)
	// Удаляет запись по ID
	DeleteStudent(context.Context, *DeleteStudentRequest) (*DeleteStudentResponse, error)
	// Обновляем по id
	UpdateStudent(context.Context, *UpdateStudentRequest) (*UpdateStudentResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) CreateUniversity(context.Context, *CreateUniversityRequest) (*CreateUniversityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUniversity not implemented")
}
func (UnimplementedServiceServer) ListUniversity(context.Context, *GetUniversityRequest) (*GetUniversityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniversity not implemented")
}
func (UnimplementedServiceServer) DeleteUniversity(context.Context, *DeleteUniversityRequest) (*DeleteUniversityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUniversity not implemented")
}
func (UnimplementedServiceServer) UpdateUniversity(context.Context, *UpdateUniversityRequest) (*UpdateUniversityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUniversity not implemented")
}
func (UnimplementedServiceServer) CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedServiceServer) ListStudent(context.Context, *GetStudentRequest) (*GetStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudent not implemented")
}
func (UnimplementedServiceServer) DeleteStudent(context.Context, *DeleteStudentRequest) (*DeleteStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedServiceServer) UpdateStudent(context.Context, *UpdateStudentRequest) (*UpdateStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_CreateUniversity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUniversityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateUniversity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/University.Service/CreateUniversity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateUniversity(ctx, req.(*CreateUniversityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListUniversity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUniversityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListUniversity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/University.Service/ListUniversity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListUniversity(ctx, req.(*GetUniversityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteUniversity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUniversityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteUniversity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/University.Service/DeleteUniversity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteUniversity(ctx, req.(*DeleteUniversityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateUniversity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUniversityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateUniversity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/University.Service/UpdateUniversity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateUniversity(ctx, req.(*UpdateUniversityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/University.Service/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateStudent(ctx, req.(*CreateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/University.Service/ListStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListStudent(ctx, req.(*GetStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/University.Service/DeleteStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteStudent(ctx, req.(*DeleteStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/University.Service/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateStudent(ctx, req.(*UpdateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "University.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUniversity",
			Handler:    _Service_CreateUniversity_Handler,
		},
		{
			MethodName: "ListUniversity",
			Handler:    _Service_ListUniversity_Handler,
		},
		{
			MethodName: "DeleteUniversity",
			Handler:    _Service_DeleteUniversity_Handler,
		},
		{
			MethodName: "UpdateUniversity",
			Handler:    _Service_UpdateUniversity_Handler,
		},
		{
			MethodName: "CreateStudent",
			Handler:    _Service_CreateStudent_Handler,
		},
		{
			MethodName: "ListStudent",
			Handler:    _Service_ListStudent_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _Service_DeleteStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _Service_UpdateStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "university.proto",
}
